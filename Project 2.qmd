---
title: "Project 2"
---

## Part 1 

1.  Choose a question to investigate. Describe what is the question you aim to answer with the data and what you want to visualize.

2.  Extract data from the `tidycensus` API. Use at least three different calls to the `tidycensus` API to extract out different datasets. For example, these could be across years, locations, or variables.

3.  Clean the data. Include some form of data wrangling and data visualization using packages such as `dplyr` or `tidyr`. Other packages that might be helpful to you include `lubridate`, `stringr`, and `forcats`. You **must use at least two functions from `purrr`**.

4.  Visualize the data. Create data visualizations of your choice. However, your analysis should include at least three plots with you using at least two different `geom_*()` functions from `ggplot2` (or another package with `geom_*()` functions).

5.  Report your findings. Provide a paragraph summarizing your methods and key findings. Include any limitations or potential biases in pulling data from the API or the analysis. Be sure to comment and organize your code so is easy to understand what you are doing.

```{}
```

## Part 2 

In this part, you and your partner will use the `rvest` package to scrape data from a website, wrangle and analyze the data, and summarize your findings.

1.  Choose a website to scrape. Select a website with structured data in HTML tables or well-defined sections. Some examples could include:

    -   A movie database like IMDb or Rotten Tomatoes (scraping movie titles, ratings, release years, etc.)

    -   A job listing site like Indeed or LinkedIn (scraping job titles, companies, and locations)

    -   A sports statistics site like ESPN or Baseball Reference (scraping team statistics, player info, etc.)

2.  Extract data with `rvest`. Here, you will want to identify the specific HTML elements or CSS selectors containing the data. Then, use `rvest` functions like `read_html()`, `html_elements()`, and `html_text()` or `html_table()` to retrieve the data.

3.  Clean the data. Next, perform some basic wrangling, such as remove extra whitespace, handle missing values, and convert data types as needed. You might find the functions from `dplyr` or `tidyr` useful for any additional transformations, such as renaming columns, filtering rows, or creating new variables.

4.  Analyze the data. Perform a simple analysis of your choice. For example, you could

    -   Count how many times specific words or themes appear.

    -   Create a summary statistic (e.g., average rating, job salary, team win percentage).

    -   Create a data visualization (e.g., bar chart, histogram) of an interesting metric.

5.  Report your findings. Provide a paragraph summarizing your methods and key findings. Include any limitations or potential biases in your scraping or analysis. Be sure to comment and organize your code so is easy to understand what you are doing.
